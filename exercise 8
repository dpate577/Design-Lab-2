// 
//  MSE 2202 Lab 2-Exercise 7
//
//  Language: Arduino (C++)
//  Target:   ESP32-S3
//  Author:   Michael Naish
//  Date:     2024 01 22 
//  
//  To program and use ESP32-S3
//   
//  Tools->Board->Boards Manager...
//    esp32 by Espressif v2.0.11
//
//  Tools->:
//    Board: "Adafruit Feather ESP32-S3 No PSRAM"
//    Upload Speed: "921600"
//    USB CDC On Boot: "Enabled"
//    USB Firmware MSC on Boot: "Disabled"
//    USB DFU On Bot: "Disabled"
//    Upload Mode:"UART0/Hardware CDC"
//    SPU Frequency: "240MHz (WiFi)"
//    Flash Mode: "QIO 80MHz"
//    Flash SIze: "4MB (32Mb)"
//    Partition Scheme: "Default 4MB with spiffs (1.2MB app/1.5MB SPIFFS)"
//    Core Debug Level: "Verbose"
//    PSRAM: 'Disabled"
//    Arduino Runs On: "Core 1"
//    Events Run On: "Core 1"
//
//  To program, press and hold the reset button then press and hold program button, release the reset 
//  button then release the program button 
//
#define SERIAL_STUDIO                              // print formatted string, that can be captured and parsed by Serial-Studio


#include <Arduino.h>
#include <Adafruit_NeoPixel.h>

// Function declarations
void doHeartbeat();
void setMotor(int dir, int pwm, int in1, int in2);
void ARDUINO_ISR_ATTR switchISR(void* arg);
void ARDUINO_ISR_ATTR encoderISR(void* arg);

// Switch structure
struct Switch {
  const int pin;                                   // GPIO pin for switch
  unsigned int numberPresses;                      // counter for number of switch presses
  unsigned int lastPressTime;                      // time of last switch press in ms
  bool pressed;                                    // flag for switch press event
};

// Encoder structure
struct Encoder {
  const int chanA;                                 // GPIO pin for encoder channel A
  const int chanB;                                 // GPIO pin for encoder channel B
  long pos;                                        // current encoder position
};

// Constants
const int cHeartbeatInterval = 75;                 // heartbeat update interval, in milliseconds
const int cSmartLED          = 21;                 // when DIP switch S1-4 is on, SMART LED is connected to GPIO21
const int cSmartLEDCount     = 1;                  // number of Smart LEDs in use
const int cPotPin            = 1;                  // when DIP switch S1-3 is on, pot (R1) is connected to GPIO1 (ADC1-0)
const int cToggle1           = 3;                  // DIP switch S1-1
const long cDebounceDelay    = 20;                 // switch debounce delay in milliseconds
const int cIN1Pin = 35;                            // GPIO pin(s) for INT
const int cIN1Chan = 0;                            // PWM channel for IN1
const int c2IN2Pin = 36;                           // GPIO pin for IN2
const int cIN2Chan = 1;                            // PWM channel for IN2
const int cPWMRes = 8;                             // bit resolution for PWM
const int cMinPWM = 0;                             // PWM value for minimum speed that turns motor
const int cMaxPWM = pow(2, cPWMRes) - 1;           // PWM value for maximum speed
const int cPWMFreq = 20000;                        // frequency of PWM signal
const int cCountsRev = 1096;                       // encoder pulses per motor revolution
const int cMaxSpeedInCounts = 1600;                // maximum encoder counts/sec
const float kp = 1.5;                              // proportional gain for PID
const float ki = 2;                                // integral gain for PID
const float kd = 0.2;                              // derivative gain for PID


// Variables
boolean heartbeatState       = true;               // state of heartbeat LED
unsigned long lastHeartbeat  = 0;                  // time of last heartbeat state change
unsigned long curMillis      = 0;                  // current time, in milliseconds
<<<<<<< HEAD
unsigned long prevMillis     = 0;                  // start time for delay cycle, in milliseconds
Switch button = {0, 0, 0, false};                  // NO pushbutton PB1 on GPIO 0, low state when pressed
Encoder encoder = {15, 16, 0};                     // encoder on GPIO 15 and 16, 0 position
unsigned long lastTime = 0;                        // last time of motor control was updated
long target = 0;                                   // target encoder count for motor
int upperLimit = 300;                              // upper encoder count for pot input mapping
int lowerLimit = -300;                             // upper encoder count for pot input mapping
int highP = 0; // high position for calibration
int lowP = 0; // low position for calibration
boolean calib = false;
int t1 = 0;  
int t2 = 0;

// Declare SK6812 SMART LED object
//   Argument 1 = Number of LEDs (pixels) in use
//   Argument 2 = ESP32 pin number
//   Argument 3 = Pixel type flags, add together as needed:
//     NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//     NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//     NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//     NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
//     NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)
Adafruit_NeoPixel SmartLEDs(cSmartLEDCount, cSmartLED, NEO_RGB + NEO_KHZ800);

// Smart LED brightness for heartbeat
unsigned char LEDBrightnessIndex = 0;
unsigned char LEDBrightnessLevels[] = {0, 0, 0, 5, 15, 30, 45, 60, 75, 90, 105, 120, 135,
                                       150, 135, 120, 105, 90, 75, 60, 45, 30, 15, 5, 0};
#define LSwitch1Pin 4 // limit switch 1 pin is connected to GPIO4
#define LSwitch2Pin 5 // limit switch 2 pin is connected to GPIO5
#define LED1Pin 6
#define LED2Pin 7
#define SW1Pin 3 // GPIO3 for SW1
#define PB1Pin 0 // GPIO0 for PB1 pushbutton
void setup() {
#if defined SERIAL_STUDIO
  Serial.begin(115200);                            // Standard baud rate for ESP32 serial monitor
#endif
  // Set up SmartLED

  SmartLEDs.begin();                               // initialize smart LEDs object
  SmartLEDs.clear();                               // clear pixel
  SmartLEDs.setPixelColor(0, SmartLEDs.Color(0,0,0)); // set pixel colours to black (off)
  SmartLEDs.setBrightness(0);                      // set brightness [0-255]
  SmartLEDs.show();                                // update LED

  // Set up motors and encoders
  ledcAttachPin(cIN1Pin, cIN1Chan);                // attach IN1 GPIO to PWM channel
  ledcSetup(cIN1Chan, cPWMFreq, cPWMRes);          // configure PWM channel frequency and resolution
  ledcAttachPin(c2IN2Pin, cIN2Chan);               // attach IN2 GPIO to PWM channel
  ledcSetup(cIN2Chan, cPWMFreq, cPWMRes);          // configure PWM channel frequency and resolution
  pinMode(encoder.chanA, INPUT);                   // configure GPIO for encoder channel A input
  pinMode(encoder.chanB, INPUT);                   // configure GPIO for encoder channel B input
  // configure encoder to trigger interrupt with each rising edge on channel A
  attachInterruptArg(encoder.chanA, encoderISR, &encoder, RISING);

  pinMode(PB1Pin, INPUT_PULLUP); // Set up the GPIO to use a pull-up resistor as an input for the PB1 pushbutton
  pinMode(LSwitch1Pin, INPUT_PULLUP);
  pinMode(LSwitch2Pin, INPUT_PULLUP);
  pinMode(LED1Pin, OUTPUT);
  pinMode(LED2Pin, OUTPUT);
  pinMode(SW1Pin, INPUT_PULLUP); // GPIO3 should be configured with a pull-up resistor as an input for switch SW1.
  attachInterruptArg(SW1Pin, switchISR, &button, CHANGE); // Configure SW1 ISR to trigger on change

  // Setup potentiometer
  pinMode(cPotPin, INPUT);                         // configure potentiometer pin for input

  // Set up push button
  pinMode(button.pin, INPUT_PULLUP);               // configure GPIO for button pin as an input with pullup resistor
  attachInterruptArg(button.pin, switchISR, &button, CHANGE); // Set up a pushbutton ISR to activate upon modification
}

void loop() {
  float deltaT = 0;                                // time interval
  long pos = 0;                                    // current motor positions
  long e = 0;                                      // position error
  float ePrev = 0;                                 // previous position error
  float dedt = 0;                                  // rate of change of position error (de/dt)
  float eIntegral = 0;                             // integral of error
  float u = 0;                                     // PID control signal
  int pwm = 0;                                     // motor speed(s), represented in bit resolution
  int dir = 1;                                     // direction that motor should turn
  int shift = 0;                                   // amount to shift encoder range
  int potVal = analogRead(cPotPin);                // read pot value (between 0 and 4095)
  // With each button press, shift the encoder endpoints according to how far the read pot value is from the
  // centre position. Allows motor shaft to be jogged past pot end points.
  int switchingMode = digitalRead(SW1Pin);
    if (switchingMode == LOW) {    
      if(!calib){ //calibration variable; led is on if not calibrated
        digitalWrite(LED2Pin,HIGH);
      }
      if (digitalRead(PB1Pin) == LOW) {
         motorCalibration(); // goes to the calibrating function below
         Serial.println("Motor calibration complete.");
       }
    // chnage to a position corresponding to where the potentiometer is set
    target = map(analogRead(cPotPin), 0, 4095, lowP, highP);
  }
  else{
    digitalWrite(LED2Pin,LOW);
    if (button.pressed) {
      if (potVal < 2048) {                           // negative rotation
        shift = map(potVal, 0, 2047, 300, 0);        // shift more towards 0
        upperLimit -= shift;
        lowerLimit -= shift;
    }
    else {                                         // positive rotation
      shift = map(potVal, 2048, 4095, 0, 300);     // shift more towards 4095
      upperLimit += shift;
      lowerLimit += shift;
    }
    button.pressed = false;                        // clear button flag
  }
  target = map(potVal, 0, 4095, lowerLimit, upperLimit);  // set encoder target based on pot value and range
  }
  // store encoder position to avoid conflicts with ISR updates
  noInterrupts();                                  // disable interrupts temporarily while reading
  pos = encoder.pos;                               // read and store current motor position
  interrupts();                                    // turn interrupts back on

  unsigned long curTime = micros();                // capture current time in microseconds
  if (curTime - lastTime > 10000) {                // wait ~10 ms
    deltaT = ((float) (curTime - lastTime)) / 1.0e6; // compute actual time interval in seconds
    lastTime = curTime;                            // update start time for next control cycle
    // use PID to calculate control signal to motor
    e = target - pos;                              // position error
    dedt = ((float) e - ePrev) / deltaT;           // derivative of error
    eIntegral = eIntegral + e * deltaT;            // integral of error (finite difference)
    u = kp * e + kd * dedt + ki * eIntegral;       // compute PID-based control signal
    ePrev = e;                                     // store error for next control cycle
 
    // set direction based on computed control signal
    dir = 1;                                       // default to forward directon
    if (u < 0) {                                   // if control signal is negative
      dir = -1;                                    // set direction to reverse
    }

    // set speed based on computed control signal
    u = fabs(u);                                   // get magnitude of control signal
    if (u > cMaxSpeedInCounts) {                   // if control signal will saturate motor
      u = cMaxSpeedInCounts;                       // impose upper limit
    }
    pwm = map(u, 0, cMaxSpeedInCounts, cMinPWM, cMaxPWM); // convert control signal to pwm
    setMotor(dir, pwm, cIN1Chan, cIN2Chan);        // update motor speed and direction

  }
  doHeartbeat();                                   // update heartbeat LED
}
void motorCalibration() {
  calib = true; // calibrated variable for led
  Serial.println("Motor calibration complete.");

  // Rotate forward until LS1 has been hit 
  while (digitalRead(LSwitch1Pin) == HIGH) {
    setMotor(1, cMaxPWM, cIN1Chan, cIN2Chan);
    // Continue rotating forward
  }  
  highP = encoder.pos;
  if(digitalRead(LSwitch1Pin) == LOW){ //red led flickers
    t1 = millis();
    Serial.println("LSwitch1Pin is LOW");
    while((millis() - t1) < 500){
      digitalWrite(LED1Pin, HIGH);
      Serial.println("LED1Pin ON 1");
    }
  }
    digitalWrite(LED1Pin, LOW);
    Serial.println("LED1Pin OFF");
  digitalWrite(LED1Pin, LOW);
  // Rotate in reverse until LS2 is hit
  while (digitalRead(LSwitch2Pin) == HIGH) {
    setMotor(-1, cMaxPWM, cIN1Chan, cIN2Chan);
    // Continue rotating in reverse direction
  }
  lowP = encoder.pos;
  if(digitalRead(LSwitch2Pin) == LOW){ //red led flickers
    t1 = millis();
    Serial.println("LSwitch2Pin or LSwitch1Pin is LOW");
   
    while((millis() - t1) < 500){
      digitalWrite(LED1Pin, HIGH);
      Serial.println("LED1Pin ON");
    }

    digitalWrite(LED1Pin, LOW);
    Serial.println("LED1Pin OFF");
  }

  digitalWrite(LED2Pin, LOW);// after calibration led is off

}

// update heartbeat LED
void doHeartbeat() {
  curMillis = millis();                            // get the current time in milliseconds
  // check to see if elapsed time matches the heartbeat interval
  if ((curMillis - lastHeartbeat) > cHeartbeatInterval) {
    lastHeartbeat = curMillis;                     // update the heartbeat time for the next update
    LEDBrightnessIndex++;                          // shift to the next brightness level
    if (LEDBrightnessIndex > sizeof(LEDBrightnessLevels)) { // if all defined levels have been used
      LEDBrightnessIndex = 0;                      // reset to starting brightness
    }
    SmartLEDs.setBrightness(LEDBrightnessLevels[LEDBrightnessIndex]); // set brightness of heartbeat LED
    SmartLEDs.setPixelColor(0, SmartLEDs.Color(0, 250, 0)); // set pixel colours to green
    SmartLEDs.show();                              // update LED
  }
}

// send motor control signals, based on direction and pwm (speed)
void setMotor(int dir, int pwm, int in1, int in2) {
  if (dir == 1) {                                  // forward
    ledcWrite(in1, pwm);
    ledcWrite(in2, 0);
  }
  else if (dir == -1) {                            // reverse
    ledcWrite(in1, 0);
    ledcWrite(in2, pwm);
  }
  else {                                           // stop
    ledcWrite(in1, 0);
    ledcWrite(in2, 0);
  }
}

// switch interrupt service routine
// argument is pointer to switch structure, which is statically cast to a Switch structure,
// allowing multiple instances of the buttonISR to be created (1 per button)
void ARDUINO_ISR_ATTR switchISR(void* arg) {
  Switch* s = static_cast<Switch*>(arg);           // cast pointer to static structure

  uint32_t pressTime = millis();                   // capture current time
  if (pressTime - s->lastPressTime > cDebounceDelay) { // if enough time has passed to consider a valid press
    s->numberPresses += 1;                         // increment switch press counter
    s->pressed = true;                             // indicate valid switch press state
    s->lastPressTime = pressTime;                  // update time to measure next press against
  }
}

// encoder interrupt service routine
// argument is pointer to an encoder structure, which is statically cast to a Encoder structure, allowing multiple
// instances of the encoderISR to be created (1 per encoder)
void ARDUINO_ISR_ATTR encoderISR(void* arg) {
  Encoder* s = static_cast<Encoder*>(arg);         // cast pointer to static structure
 
  int b = digitalRead(s->chanB);                   // read state of channel B
  if (b > 0) {                                     // high, leading channel A
    s->pos++;                                      // increase position
  }
  else {                                           // low, lagging channel A
    s->pos--;                                      // decrease position
  }

}
