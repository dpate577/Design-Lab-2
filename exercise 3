//
// MSE 2202 Lab 2-Exercise 2
//
// Uses an external interrupt to count the number of times a (debounced) button/limit switch is pressed
//
// Language: Arduino (C++)
// Target: ESP32-S3
// Author: Michael Naish
// Date: 2024 01 21
//
// To program and use ESP32-S3
//
// Tools->Board->Boards Manager...
// esp32 by Espressif v2.0.11
//
// Tools->:
// Board: "Adafruit Feather ESP32-S3 No PSRAM"
// Upload Speed: "921600"
// USB CDC On Boot: "Enabled"
// USB Firmware MSC on Boot: "Disabled"
// USB DFU On Bot: "Disabled"
// Upload Mode:"UART0/Hardware CDC"
// SPU Frequency: "240MHz (WiFi)"
// Flash Mode: "QIO 80MHz"
// Flash SIze: "4MB (32Mb)"
// Partition Scheme: "Default 4MB with spiffs (1.2MB app/1.5MB SPIFFS)"
// Core Debug Level: "Verbose"
// PSRAM: 'Disabled"
// Arduino Runs On: "Core 1"
// Events Run On: "Core 1"
//
// To program, press and hold the reset button then press and hold program button, release the reset
// button then release the program button
//
#define SWITCH_OUTPUT_ON // uncomment to turn off output of switch state information
#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
// Function declarations
void doHeartbeat();
void ARDUINO_ISR_ATTR switchISR(void* arg);
// Switch structure
struct Switch {
 const int pin; // GPIO pin for switch
 uint32_t numberPresses; // counter for number of switch presses
 uint32_t lastPressTime; // time of last press in milliseconds
 bool pressed; // state variable to indicate "valid" switch press
};
// Constants
const int cHeartbeatInterval = 75; // heartbeat update interval, in milliseconds
const int cSmartLED = 21; // when DIP switch S1-4 is on, SMART LED is connected to GPIO21
const int cSmartLEDCount = 1; // number of Smart LEDs in use
const long cDebounceDelay = 350;
const int cLED1 =6; // LED1 is in GPIO6 
const int cLED2 =7; //LED 2 is in GPIO7
// switch debounce delay in milliseconds
// Variables
boolean heartbeatState = true; // state of heartbeat LED
unsigned long lastHeartbeat = 0; // time of last heartbeat state change
unsigned long curMillis = 0; // current time, in milliseconds
unsigned long prevMillis = 0; // start time for delay cycle, in milliseconds
// Declare SK6812 SMART LED object
// Argument 1 = Number of LEDs (pixels) in use
// Argument 2 = ESP32 pin number
// Argument 3 = Pixel type flags, add together as needed:
// NEO_KHZ800 800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
// NEO_KHZ400 400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
// NEO_GRB Pixels are wired for GRB bitstream (most NeoPixel products)
// NEO_RGB Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
// NEO_RGBW Pixels are wired for RGBW bitstream (NeoPixel RGBW products)
Adafruit_NeoPixel SmartLEDs(cSmartLEDCount, cSmartLED, NEO_RGB + NEO_KHZ800);
// Smart LED brightness for heartbeat
unsigned char LEDBrightnessIndex = 0;
unsigned char LEDBrightnessLevels[] = {0, 0, 0, 5, 15, 30, 45, 60, 75, 90, 105, 120, 135,
 150, 135, 120, 105, 90, 75, 60, 45, 30, 15, 5, 0};
Switch limitSwitch = {4, 0, 0, false}; // limit switch on GPIO4, 0 count, not pressed
Switch limitSwitch2 = {5, 0, 0, false}; //limit switch 2 on GPIO5, 0 count, not pressed
void setup() {
#if defined SWITCH_OUTPUT_ON
 Serial.begin(115200);
#endif
 // Set up SmartLED
 SmartLEDs.begin(); // initialize smart LEDs object
 SmartLEDs.clear(); // clear pixel
 SmartLEDs.setPixelColor(0, SmartLEDs.Color(0,0,0)); // set pixel colours to black (off)
 SmartLEDs.setBrightness(0); // set brightness [0-255]
 SmartLEDs.show(); // update LED
 pinMode(cLED1, OUTPUT);
 digitalWrite(cLED1, HIGH); //allows toggling (when on high it led turns on and low it turns off)
 pinMode(cLED2, OUTPUT);
digitalWrite(cLED2, HIGH);
 // Setup limit switch
 pinMode(limitSwitch.pin, INPUT_PULLUP); // congifure GPIO for limit switch as input with internal pullup resistor
 attachInterruptArg(limitSwitch.pin, switchISR, &limitSwitch, FALLING); // Configure ISR to trigger on low signal on pin
 pinMode(limitSwitch2.pin, INPUT_PULLUP); // congifure GPIO for limit switch as input with internal pullup resistor
 attachInterruptArg(limitSwitch2.pin, switchISR, &limitSwitch2, FALLING); // Configure ISR to trigger on low signal on pin
}
void loop() {
 if (limitSwitch.pressed) { // if state of limit switch changed
#ifdef SWITCH_OUTPUT_ON
 Serial.printf("Limit switch 1 pressed %u times\n", limitSwitch.numberPresses);
 if (limitSwitch.numberPresses % 2 == 0) {
 digitalWrite(cLED1, HIGH);
 }
 else
 digitalWrite(cLED1, LOW);
#endif
 limitSwitch.pressed = false; // reset switch state
 }
 if (limitSwitch2.pressed) { // if state of limit switch changed
#ifdef SWITCH_OUTPUT_ON
 Serial.printf("Limit switch 2 pressed %u times\n", limitSwitch2.numberPresses);
 if (limitSwitch2.numberPresses % 2 == 0) {
 digitalWrite(cLED2, HIGH);
 }
 else
 digitalWrite(cLED2, LOW);
#endif
 limitSwitch2.pressed = false; // reset switch state
 }
 doHeartbeat(); // update heartbeat LED
}
// update heartbeat LED
void doHeartbeat() {
 curMillis = millis(); // get the current time in milliseconds
 // check to see if elapsed time matches the heartbeat interval
 if ((curMillis - lastHeartbeat) > cHeartbeatInterval) {
 lastHeartbeat = curMillis; // update the heartbeat time for the next update
 LEDBrightnessIndex++; // shift to the next brightness level
 if (LEDBrightnessIndex > sizeof(LEDBrightnessLevels)) { // if all defined levels have been used
 LEDBrightnessIndex = 0; // reset to starting brightness
 }
 SmartLEDs.setBrightness(LEDBrightnessLevels[LEDBrightnessIndex]); // set brightness of heartbeat LED
 SmartLEDs.setPixelColor(0, SmartLEDs.Color(0, 250, 0)); // set pixel colours to green
 SmartLEDs.show(); // update LED
 }
}
// switch interrupt service routine
// argument is pointer to switch structure, which is statically cast to a Switch structure,
// allowing multiple instances of the buttonISR to be created (1 per button)
void ARDUINO_ISR_ATTR switchISR(void* arg) {
 Switch* s = static_cast<Switch*>(arg); // cast pointer to static structure
 uint32_t pressTime = millis(); // capture current time
 if (pressTime - s->lastPressTime > cDebounceDelay) { // if enough time has passed to consider a valid press
 s->numberPresses += 1; // increment switch press counter
 s->pressed = true; // indicate valid switch press state
 s->lastPressTime = pressTime; // update time to measure next press against
 }
}
